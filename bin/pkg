#!/bin/bash

#PACKAGE_MANAGER=pacman
#PACKAGE_MANAGER=yaourt
_pm() {
    if [[ -z $PACKAGE_MANAGER ]]; then
        if which yaourt >/dev/null; then
            PACKAGE_MANAGER=yaourt
        else
            PACKAGE_MANAGER=pacman
        fi
    fi
    $PACKAGE_MANAGER $@
}
_pkg_search_binary() {
    pkgfile -srv '\/s?bin\/'$1'$'
}
_pkg_install_binary() {
    local bin_name=$1
    local packages=()
    local fields
    local i n
    local user_choice

    packages=($(pkgfile -sr '\/s?bin\/'$bin_name'$'))
    n=${#packages[@]}

    if ((n > 1)); then
        for ((i=0;i<n;i++)); do
            echo "$((i+1))) ${packages[i]}"
        done

        read -p "[1-$n]? " user_choice || return 1
        let user_choice-=1
        
        if [[ -z ${packages[user_choice]} ]]; then
            echo "Invalid choice" >&2
            return 1
        fi
    elif ((n == 0)); then
        echo "No binary file named $bin_name" >&2
        return 1
    else
        user_choice=0
        read -p "Install ${packages[user_choice]}? [y/N]" -n1
        if [ "$REPLY" != y ] && [ "$REPLY" != Y ]; then
            return 1
        fi
    fi
    pkg install ${packages[user_choice]}
}
_pkg_install_package() {
    local arg_confirm="--noconfirm"
    local arg_needed="--needed"
    local extra_args=()
    local args=`getopt -o'-ifvNh' --long inactive,force,verbose,no-needed,help -n 'pkg' -- "$@"`
    eval set -- "$args"

    while true ; do
      case "$1" in
        -i|--inactive) arg_confirm="" ; shift ;;
        -N|--no-needed) arg_needed="" ; shift ;;
        -f|--force) extra_args+=( "--force" ) ; shift ;;
        -v|--verbose) extra_args+=( "--verbose" ) ; shift ;;
        -h|--help) echo "usage:  pkg i[nstall] [option] package
options:
  -i, --inactive       confirm before install packages
  -N, --no-needed      reinstall up to date packages
  -f, --force          force install, overwrite conflicting files
  -v, --verbose        be verbose
  -h, --help           show this message
"
        _pm -S --help
        return 0
        ;;
        --) shift ; break ;;
        *) break ;;
      esac
    done
    sudo _pm -S --color=always $arg_confirm $arg_needed ${extra_args[@]} $@
}
_pkg_system_upgrade() {
    sudo -v
    read -N 1 -p "Are you sure upgrade the system? 
Warning: The _pm cache will be erased, regardless upgrade successful or not.
(y/N)"
    if [[ $REPLY == 'y' ]] || [[ $REPLY == 'Y' ]]; then
        sudo _pm -S -cc --noconfirm
        sudo _pm -S -u -yy --color=always --force
    else
        return 2
    fi

}
declare -Ag _pkg_action_map=(
["ui"]="_pkg_system_upgrade"
["iu"]="_pkg_system_upgrade"
["su"]="_pkg_system_upgrade"
["sys"]="_pkg_system_upgrade"
["systemupgrade"]="_pkg_system_upgrade"
["u"]="sudo _pm -Sy"
["up"]="sudo _pm -Sy"
["update"]="sudo _pm -Sy"
["i"]="_pkg_install_package"
["inst"]="_pkg_install_package"
["install"]="_pkg_install_package"
["a"]="_pkg_install_package"
["add"]="_pkg_install_package"
["if"]="_pm -Si"
["info"]="_pm -Si"

["r"]="sudo _pm -Rsc --color=always"
["remove"]="sudo _pm -Rsc --color=always"
["un"]="sudo _pm -Rsc --color=always"
["uninstall"]="sudo _pm -Rsc --color=always"

["s"]="pacsearch"
["se"]="pacsearch"
["search"]="pacsearch"

["f"]="pkgfile -srv"
["file"]="pkgfile -srv"
["path"]="pkgfile -srv"
["filename"]="pkgfile -srv"

["binary"]="pkgfile -bsv"
["b"]="_pkg_search_binary"
["bi"]="_pkg_install_binary"
["ib"]="_pkg_install_binary"
["installbinary"]="_pkg_install_binary"

["l"]="pkgfile -l"
["list"]="pkgfile -l"
)

pkg() {
    local IFS
    local action=$1
    shift

    case $action in
        *)
        if [[ -n ${_pkg_action_map[$action]} ]]; then
            IFS=' '
            local cmds=(${_pkg_action_map[$action]})
            IFS=
            ${cmds[@]} $@
        else
            echo "unrecognized action $action" >&2
        fi
        ;;
    esac
}


# if we are executed directly
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && pkg $@
